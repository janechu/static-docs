/**
 * This file generates the export files in the src folder for consumption
 */
import fs from "fs-extra";
import path from "path";
import { camelCase } from "lodash-es";

const __dirname = process.cwd();
const appDir = path.resolve(__dirname, "src");
const autoGeneratedFileNotice = function(contents, isStyleTemplate) {
    let fileContents = fs.readFileSync(contents, "utf-8");
    let additionalExports = ``;

    if (isStyleTemplate) {
        const regexp = /(--sd-[a-z-]*[^:|)])/g;
        const cssVariables = [...fileContents.matchAll(regexp)].map((match) => {
            return match[0];
        });
        const uniqueCssVariables = [...new Set(cssVariables)];
        /**
         * longest to shortest ensures replacement does not accidentally occur on similarly named css variable 
         * such as --sd-foo --sd-foo-bar
         */ 
        uniqueCssVariables.sort((a, b) => b.length - a.length ); 
        uniqueCssVariables.forEach((cssVariable) => {
            fileContents = fileContents.replaceAll(cssVariable, "<%- " + camelCase(cssVariable) + " %>")
        });

        additionalExports = 
`const templateVariables = {${uniqueCssVariables.reduce((prevValue, cssVariable) => { return `${prevValue}    ${camelCase(cssVariable)}: "${cssVariable}",\n`; }, "\n")}};
type TemplateVariables = typeof templateVariables;
export { templateVariables, TemplateVariables };`;
    }

    fileContents = `\`${fileContents}\``;

    return `/**
 * Auto-generated file from build/generate-export-files.js
 */
const template = ${fileContents};
export default template;
${additionalExports}`;
};
[ // html templates
    path.resolve(appDir, "templates/toolbar/index.html"),
    path.resolve(appDir, "templates/footer/index.html"),
    path.resolve(appDir, "templates/document/index.html"),
    path.resolve(appDir, "templates/frontpage/index.html"),
    path.resolve(appDir, "templates/meta/index.html"),
    path.resolve(appDir, "templates/category/index.html"),
    path.resolve(appDir, "templates/sidebar/index.html"),
    path.resolve(appDir, "templates/version/index.html")
].map((template) => {
    fs.writeFileSync(template.replace(".html", ".ts"), autoGeneratedFileNotice(template));
});

[ // style templates
    path.resolve(appDir, "templates/style/index.html"),
].map((template) => {
    fs.writeFileSync(template.replace(".html", ".ts"), autoGeneratedFileNotice(template, true));
})